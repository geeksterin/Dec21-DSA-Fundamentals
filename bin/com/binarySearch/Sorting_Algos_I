package sorting;

import java.util.ArrayList;
import java.util.Arrays;

// Time Complexity : O(n^2)
// Space Complexity: O(1)
public class code_sample {

    public static void bubbleSort(int[] arr){
        int n=arr.length;

        for(int i=0;i<n-1;i++){  // each time this loop will fix one max element at its correct position
            for(int j=0;j<n-i-1;j++){
                if(arr[j]>arr[j+1]){  // ASC    DSC-> arr[j]<arr[j+1]
                    int temp=arr[j];
                    arr[j]=arr[j+1];
                    arr[j+1]=temp;
                }
            }
        }

    }


    public static void insertionSort(int[] arr) {
        int n=arr.length;

            for(int i=1;i<n;i++){ // pick the element one by one to insert
                int key=arr[i];
                int j;

                for(j=i-1;j>=0;j--){
                    if(arr[j]>key){
                        arr[j+1]=arr[j];
                    }else{
                        break;
                    }
                }

                arr[j+1]=key;
            }

    }

    public static void selectionSort(int[] arr) {
        int n=arr.length;

        for(int i=0;i<n-1;i++){
            int minIndex=i;

            for(int j=i+1 ; j<n ; j++){
                if(arr[j]<arr[minIndex]){
                    minIndex=j;
                }
            }

            if(minIndex!=i){
                int temp=arr[minIndex];
                arr[minIndex]=arr[i];
                arr[i]=temp;
            }
        }

    }

    public static void main(String[] args) {
//        int[] arr = {12, 5, 3, -1};
       // bubbleSort(arr);
       //insertionSort(arr);
//        selectionSort(arr);

//        Arrays.sort(arr);
//
//        System.out.println("=======================================================");
//        System.out.println(Arrays.toString(arr));


 // find Kth smallest element
        int[] arr = {12, 5, 3, -1};
        int k=2;
        Arrays.sort(arr);

        System.out.println("=======================================================");
        System.out.println(Arrays.toString(arr));


        System.out.println(arr[k]);

// kth largest element
        int n=arr.length;
        System.out.println(arr[n-k]);

        ArrayList<String> list=new ArrayList<>();
        list.add("jay");
        list.add("ram");
        list.add("geekster");


        for(int i=0;i<list.size();i++){
            System.out.println(list.get(i));
        }

        list.remove(2);
    }



}

/*
Bubble Sort:
   0,  1, 2,  3
1 {12, 5, 3, -1}

  {5, 12, 3, -1}

  {5, 3, 12, -1}

  {5, 3, -1, 12}

2 {5, 3, -1, 12}

  {3, 5, -1, 12}

  {3, -1, 5, 12}

3 {3, -1, 5, 12}

  {-1, 3, 5, 12}



Insertion Sort: -> insert at its correct position
  0, 1,  2, 3, 4, 5
 {5, 1, 14, 6, 3, 6}
               |
  {          } i
 key=3;
 0, 1, 2, 3, 4
 1, , 5 , 6, 14
 | |
 j j+1




 {1, 3, 5, 6, 6 , 14}

- we will be having sorted array
- while inserting ele into that sorted array check with each position from back and insert at the correct position



 [1, 5]<-add<- 3

 [1, 3, 5]<-14


[1, 3, 4, 5, 14] <- 4

[-1, 1, 3, 5, 14] <- -1


Selection Sort:

find the min element and place at 0th index



 */
